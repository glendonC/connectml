import React, { useState } from 'react';
import { LandingPage } from './pages/landing/LandingPage';
import { LoadingPage } from './pages/loading/LoadingPage';
import { ResultsPage } from './pages/results/ResultsPage';
import { PipelineProvider } from './context/PipelineContext';
import { componentCatalog } from './types/components';

export type Domain = 'fintech' | 'healthcare' | 'sustainability';
export type ComponentType = 'preprocessing' | 'model' | 'postprocessing';

export interface AgentReasoning {
  agentName: string;
  role: string;
  quote: string;
  componentTitle: string;
  description: string;
  why: string;
  performanceImpact: {
    accuracy: string;
    latency: string;
    reliability: string;
  };
  note?: string;
  codeSnippet?: string;
}

export interface FlowNode {
  stepId: string;
  title: string;
  nodeType: ComponentType;
  position: { x: number; y: number };
  agent: string;
  shortSummary: string;
  impactMetric: string;
  connections: Array<{ from: string; to: string }>;
}

export interface ThreeDNode {
  title: string;
  nodeType: ComponentType;
  agent: string;
  impact: string;
  tooltip: string;
  position3D: { x: number; y: number; z: number };
  modelAsset?: string;
}

export interface PipelineComponent {
  id: string;
  name: string;
  description: string;
  type: ComponentType;
  metrics?: {
    accuracy?: number;
    latency?: number;
    memory?: number;
    throughput?: number;
  };
  parameters?: number;
  huggingFaceId?: string;
  inputFormat?: string;
  outputFormat?: string;
  source?: {
    name: string;
    url: string;
    version: string;
    lastUpdated: string;
    organization?: string;
  };
  requirements?: {
    dependencies: string[];
    environments: string[];
    minCPU?: string;
    minRAM?: string;
    minGPU?: string;
  };
  selectionReason?: string;
  performanceNotes?: string;
  alternatives?: PipelineComponent[];
  agentReasoning?: AgentReasoning;
  flowNode?: FlowNode;
  threeDNode?: ThreeDNode;
}

export interface Pipeline {
  id: string;
  name: string;
  description: string;
  components: PipelineComponent[];
  totalModels: number;
  estimatedAccuracy: number;
  estimatedLatency: number;
}

type AppState = 'landing' | 'loading' | 'results';

function App() {
  const [currentState, setCurrentState] = useState<AppState>('landing');
  const [prompt, setPrompt] = useState('');
  const [mode, setMode] = useState<'fast' | 'precise'>('fast');
  const [generatedPipeline, setGeneratedPipeline] = useState<Pipeline | null>(null);

  const handleGeneratePipeline = async () => {
    if (prompt.trim()) {
      setCurrentState('loading');
      
      try {
        const response = await fetch('http://localhost:8000/generate-pipeline', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ prompt: prompt.trim() })
        });

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        console.log('API Response:', data);  // For debugging

        // Convert the backend response to our frontend Pipeline type
        const pipeline: Pipeline = {
          id: '1',  // We can generate this on the frontend for now
          name: 'Generated Pipeline',  // Could be generated by GPT in the backend later
          description: data.explanation,
          components: data.components.map((component: any) => ({
            id: component.id,
            name: component.name,
            description: component.description,
            type: component.type as ComponentType,
            requirements: component.requirements,
            agentReasoning: {
              agentName: component.agent.name,
              role: component.agent.role,
              quote: component.agent.quote,
              componentTitle: component.name,
              description: component.description,
              why: `Selected for optimal pipeline performance`,
              performanceImpact: {
                accuracy: '+0%',  // These could come from the backend later
                latency: '0ms',
                reliability: '+0%'
              }
            },
            flowNode: {
              stepId: component.id,
              title: component.name,
              nodeType: component.type,
              position: { x: (data.components.indexOf(component) + 1) * 300, y: 100 },
              agent: component.agent.name,
              shortSummary: component.description,
              impactMetric: 'Selected by AI',
              connections: []
            },
            threeDNode: {
              title: component.name,
              nodeType: component.type,
              agent: component.agent.name,
              impact: 'AI Selected',
              tooltip: component.description,
              position3D: { 
                x: (data.components.indexOf(component) - 1) * 6,
                y: 0,
                z: 0
              }
            }
          })),
          totalModels: data.components.filter((c: any) => c.type === 'model').length,
          estimatedAccuracy: 0.9,  // Placeholder
          estimatedLatency: 100,   // Placeholder
        };

        setGeneratedPipeline(pipeline);
        setCurrentState('results');
      } catch (error) {
        console.error('Error generating pipeline:', error);
        // You might want to show an error message to the user here
        setCurrentState('landing');
      }
    }
  };

  return (
    <PipelineProvider>
      <div className="min-h-screen bg-white">
        {currentState === 'landing' && (
          <LandingPage
            prompt={prompt}
            setPrompt={setPrompt}
            mode={mode}
            setMode={setMode}
            onGenerate={handleGeneratePipeline}
          />
        )}
        {currentState === 'loading' && (
          <LoadingPage prompt={prompt} mode={mode} />
        )}
        {currentState === 'results' && generatedPipeline && (
          <ResultsPage
            pipeline={generatedPipeline}
            onBack={() => setCurrentState('landing')}
          />
        )}
      </div>
    </PipelineProvider>
  );
}

export default App;